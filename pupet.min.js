"use strict";

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var puppeteer = require("puppeteer");

_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var browser, page, URLs, batches, newBatch, results, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, batch, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, url, newPage, result;

    return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
            switch (_context.prev = _context.next) {
                case 0:

                    console.log('launching browser');
                    _context.next = 3;
                    return puppeteer.launch({ headless: true });

                case 3:
                    browser = _context.sent;
                    _context.next = 6;
                    return browser.newPage();

                case 6:
                    page = _context.sent;
                    _context.next = 9;
                    return page.goto("https://www.google.com/search?q=" + "neural networks");

                case 9:
                    _context.next = 11;
                    return page.$$eval('.r a', function (links) {
                        return links.map(function (l) {

                            return l.href;
                        });
                    });

                case 11:
                    URLs = _context.sent;
                    batches = [];
                    newBatch = [];


                    URLs.forEach(function (url, index) {
                        newBatch.push(url);

                        if (index % 3 === 0) {
                            //flush the batch to batches
                            batches.push(newBatch);
                            newBatch = [];
                        }
                    });

                    results = [];

                    console.log('batches.length:', batches.length);
                    _iteratorNormalCompletion = true;
                    _didIteratorError = false;
                    _iteratorError = undefined;
                    _context.prev = 20;
                    _iterator = batches[Symbol.iterator]();

                case 22:
                    if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                        _context.next = 62;
                        break;
                    }

                    batch = _step.value;

                    console.log("Starting to proccess batch: " + batch);
                    _iteratorNormalCompletion2 = true;
                    _didIteratorError2 = false;
                    _iteratorError2 = undefined;
                    _context.prev = 28;
                    _iterator2 = batch[Symbol.iterator]();

                case 30:
                    if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                        _context.next = 45;
                        break;
                    }

                    url = _step2.value;

                    console.log("Opening page " + url);
                    _context.next = 35;
                    return browser.newPage();

                case 35:
                    newPage = _context.sent;
                    _context.next = 38;
                    return newPage.goto(url);

                case 38:
                    _context.next = 40;
                    return newPage.evaluate(function () {
                        return "hello world";
                    });

                case 40:
                    result = _context.sent;

                    console.log("result", result, url);

                case 42:
                    _iteratorNormalCompletion2 = true;
                    _context.next = 30;
                    break;

                case 45:
                    _context.next = 51;
                    break;

                case 47:
                    _context.prev = 47;
                    _context.t0 = _context["catch"](28);
                    _didIteratorError2 = true;
                    _iteratorError2 = _context.t0;

                case 51:
                    _context.prev = 51;
                    _context.prev = 52;

                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }

                case 54:
                    _context.prev = 54;

                    if (!_didIteratorError2) {
                        _context.next = 57;
                        break;
                    }

                    throw _iteratorError2;

                case 57:
                    return _context.finish(54);

                case 58:
                    return _context.finish(51);

                case 59:
                    _iteratorNormalCompletion = true;
                    _context.next = 22;
                    break;

                case 62:
                    _context.next = 68;
                    break;

                case 64:
                    _context.prev = 64;
                    _context.t1 = _context["catch"](20);
                    _didIteratorError = true;
                    _iteratorError = _context.t1;

                case 68:
                    _context.prev = 68;
                    _context.prev = 69;

                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }

                case 71:
                    _context.prev = 71;

                    if (!_didIteratorError) {
                        _context.next = 74;
                        break;
                    }

                    throw _iteratorError;

                case 74:
                    return _context.finish(71);

                case 75:
                    return _context.finish(68);

                case 76:
                    _context.next = 78;
                    return browser.close();

                case 78:
                case "end":
                    return _context.stop();
            }
        }
    }, _callee, undefined, [[20, 64, 68, 76], [28, 47, 51, 59], [52,, 54, 58], [69,, 71, 75]]);
}))();